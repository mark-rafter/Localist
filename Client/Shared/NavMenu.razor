<nav class="navbar navbar-expand navbar-dark bg-gradient fixed-bottom">
    <div class="container justify-content-center text-center" style="max-height: inherit;">
        <div class="navbar-nav" style="max-height: inherit;">
            <AuthorizeView>
                <Authorized>
                    @for (var i = 0; i < NavLinksAuthorized.Length; i++)
                    {
                        if (i > 0)
                        {
                            <span class="mx-1 mx-sm-3 mx-lg-4"></span>
                        }
                        @DisplayNavLink(NavLinksAuthorized[i]);
                    }
                </Authorized>
                <NotAuthorized>
                    @for (var i = 0; i < NavLinksUnauthorized.Length; i++)
                    {
                        if (i > 0)
                        {
                            <span class="mx-1 mx-sm-3 mx-lg-4"></span>
                        }
                        @DisplayNavLink(NavLinksUnauthorized[i]);
                    }
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</nav>

@code {
    const string rippleBtnClass = "btn btn-link py-0";
    const string activeClass = "active";
    const string navLinkClass = "nav-link stretched-link";
    const string labelClass = "mb-0 mt-1 d-none d-lg-block";

    static NavLinkItem LoginLink = new("Sign In", "/login", "key", Match: NavLinkMatch.All);
    static NavLinkItem HomeLink = new("Home", "/", "house-door", Match: NavLinkMatch.All);
    static NavLinkItem BookmarksLink = new("Bookmarks", "/bookmarks", "bookmark-check");
    static NavLinkItem NewPostLink = new("New Post", "/newpost", "pencil-square");
    static NavLinkItem SettingsLink = new("Settings", "/settings", "gear");
    static NavLinkItem AboutLink = new("About", "/about", "info-circle");

    NavLinkItem[] NavLinksAuthorized = new[]
    {
        HomeLink, 
        BookmarksLink,
        NewPostLink, 
        SettingsLink, 
        AboutLink
    };

    NavLinkItem[] NavLinksUnauthorized = new[]
    {
        LoginLink, 
        BookmarksLink with { IsDisabled = true },
        NewPostLink with { IsDisabled = true }, 
        SettingsLink with { IsDisabled = true }, 
        AboutLink
    };

    RenderFragment<NavLinkItem> DisplayNavLink = navLink => __builder =>
    {
        <RippleButton TagType="a" class="@GetClass(rippleBtnClass, navLink.IsDisabled)">
            <NavLink href="@navLink.Route" Match="@navLink.Match" ActiveClass="@activeClass" class="@GetClass(navLinkClass, navLink.IsDisabled)">
                <BootstrapIcon Name="@navLink.Icon" Size="1.5rem" />
                <small class="@labelClass">@navLink.Label</small>
            </NavLink>
        </RippleButton>
    };

    static string GetClass(string baseClass, bool isDisabled) 
        => isDisabled ? $"{baseClass} disabled" : baseClass;

    record NavLinkItem(
        string Label,
        string Route,
        string Icon,
        NavLinkMatch Match = NavLinkMatch.Prefix,
        bool IsDisabled = false);
}
